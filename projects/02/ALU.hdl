// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1


CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    /* conditionally zero x / y */
    Xor16(x=x, y=x, out=zerodX);
    Mux16(a=x, b=zerodX, sel=zx, out=x1);

    Xor16(x=y, y=y, out=zerodY);
    Mux16(a=y, b=zerodY, sel=zy, out=y1);

    /* conditionally negate x / y */
    Not16(in=x1, out=notX);
    Mux16(a=x1, b=notX, sel=nx, out=x2);

    Not16(in=y1, out=notY);
    Mux16(a=y1, b=notY, sel=ny, out=y2);

    /* f */
    Add16(a=x2, b=y2, out=addResult);
    And16(a=x2, b=y2, out=andResult);
    Mux16(a=andResult, b=addResult, sel=f, out=outNoNot);

    /* no - makes copy of out and lastBit for status bits */
    Not16(in=outNoNot, out=outNot);
    Mux16(a=outNoNot, b=outNot, sel=no, out=out, out=copyOut, out[15]=lastBit);

    /* zr and ng */
    /* if out == 0 zr=1, else zr=0 */
    /* check if out is 0 */
    Or16Way(in=copyOut, out=orOut);
    Not(in=orOut, out=outIsZero);
    Mux(a=false, b=true, sel=outIsZero, out=zr);

    /* if out < 0 ng = 1, else ng = 0
    /* check if out is negative */
    And(a=true, b=lastBit, out=outIsNeg);
    Mux(a=false, b=true, sel=outIsNeg, out=ng);
}
