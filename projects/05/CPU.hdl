// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=instructionMux);

    Not(in=instruction[15], out=AInstruction);
    And(a=instruction[15], b=instruction[5], out=w1);
    /* AInstruction or CInstruction and instruction5 */
    Or(a=AInstruction, b=w1, out=loadA);
    ARegister(in=instructionMux, load=loadA, out=ARegisterOut);

    Mux16(a=ARegisterOut, b=inM, sel=instruction[12], out=AOrM);

    /* CInstruction and instruction4 */
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUOut, load=loadD, out=DRegisterOut);

    ALU(x=DRegisterOut, y=AOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOut, zr=zr, ng=ng);

    And(a=instruction[15], b=instruction[3], out=writeM);

    Register(in=instructionMux, load=loadA, out[0..14]=addressM);

    /* ALU output control bits say whether 0 or less than and can infer if greater than */
    Or(a=zr, b=ng, out=zrOrng);
    Not(in=zrOrng, out=pos);

    /* all cases for jumping based on ALU control bits */
    And(a=instruction[0], b=pos, out=j1);

    And(a=instruction[1], b=zr, out=j2);

    And(a=instruction[0], b=instruction[1], out=j3j2);
    Or(a=zr, b=pos, out=gte);
    And(a=j3j2, b=gte, out=j3);

    And(a=instruction[2], b=ng, out=j4);

    Not(in=zr, out=nzr);
    And(a=instruction[2], b=instruction[0], out=j1j3);
    And(a=j1j3, b=nzr, out=j5);

    And(a=instruction[2], b=instruction[1], out=j1j2);
    Or(a=zr, b=ng, out=lte);
    And(a=lte, b=j1j2, out=j6);

    And(a=j1j2, b=j3, out=j7);

    /* determine if jumping -> if so load, else inc */
    Or(a=j1, b=j2, out=o1);
    Or(a=o1, b=j3, out=o2);
    Or(a=o2, b=j4, out=o3);
    Or(a=o3, b=j5, out=o4);
    Or(a=o4, b=j6, out=o5);
    Or(a=o5, b=j7, out=o6);
    And(a=o6, b=instruction[15], out=jump);

    PC(in=ARegisterOut, reset=reset, inc=true, load=jump, out[0..14]=pc);
}
