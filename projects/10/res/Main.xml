<class>
  <keyword> class </keyword>
  <identifier> Main </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <keyword> boolean </keyword>
    <identifier> test </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> main </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <identifier> SquareGame </identifier>
        <identifier> game </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> game </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> SquareGame </identifier>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> game </identifier>
          <symbol> . </symbol>
          <identifier> run </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> game </identifier>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
        </statements>
        <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> test </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> i </identifier>
        <symbol> , </symbol>
        <identifier> j </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier> String </identifier>
        <identifier> s </identifier>
        <symbol> ; </symbol>
      </varDec>
      <varDec>
        <keyword> var </keyword>
        <identifier> Array </identifier>
        <identifier> a </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> false </identifier>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <identifier> s </identifier>
              <symbol> = </symbol>
              <string_const> "string constant" </string_const>
            </term>
          </expression>
        <statements>
          <letStatement>
            <keyword> let </keyword>
            <identifier> s </identifier>
            <symbol> = </symbol>
            <expression>
              <term>
                <identifier> null </identifier>
              </term>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          <letStatement>
            <keyword> let </keyword>
            <identifier> a </identifier>
            <symbol> [ </symbol>
            <int_const> 1 </int_const>
            <symbol> ] </symbol>
            <symbol> = </symbol>
            <expression>
              <term>
                <identifier> a </identifier>
                <symbol> [ </symbol>
                <int_const> 2 </int_const>
                <symbol> ] </symbol>
              </term>
            </expression>
            <symbol> ; </symbol>
          </letStatement>
          </statements>
          <symbol> } </symbol>
          <symbol> } </symbol>
        </ifStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> i </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> i </identifier>
              <symbol> * </symbol>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <symbol> - </symbol>
                    <identifier> j </identifier>
                    <symbol> ) </symbol>
                  </term>
                </expression>
                <expression>
                  <term>
                    <identifier> j </identifier>
                    <symbol> = </symbol>
                    <identifier> j </identifier>
                    <identifier> i </identifier>
                    <symbol> = </symbol>
                    <identifier> i </identifier>
                    <symbol> | </symbol>
                    <identifier> j </identifier>
                  </term>
                </expression>
                <expression>
                  <term>
                    <symbol> } </symbol>
                  </term>
                </expression>
                <expression>
                  <term>
                    <symbol> } </symbol>
                    <symbol> } </symbol>
