class Loan {
  field Fraction principal, monthlyPayment, monthsTillPayoff;

  constructor Loan new(int principalAmount) {
    let principal = Fraction.new(principalAmount, 1);

    return this;
  }

  method void setMonthlyPayment(int amount) {
    let monthlyPayment = Fraction.new(amount, 1);
    do updateMonthsTillPayoffBasedOffPaymentAmount();

    return;
  }

  method void setMonthsTillPayoff(int months) {
    let monthsTillPayoff = Fraction.new(months, 1);
    do updateMonthlyPaymentBasedOffNewMonthsTillPayoff();

    return;
  }

  method void updateMonthlyPaymentBasedOffNewMonthsTillPayoff() {
    let monthlyPayment = principal.divideBy(monthsTillPayoff);

    return;
  }

  method void updateMonthsTillPayoffBasedOffPaymentAmount() {
    let monthsTillPayoff = principal.divideBy(monthlyPayment);

    return;
  }

  method void printPrincipal() {
    if (principal.getDenominator() = 1) {
      do Output.printInt(principal.getNumerator());
    } else {
      do principal.printAsMixedFraction();
    }

    return;
  }

  method void printMonthlyPayment() {
    if (monthlyPayment.getDenominator() = 1) {
      do Output.printInt(monthlyPayment.getNumerator());
    } else {
      do monthlyPayment.printAsMixedFraction();
    }

    return;
  }

  method void printMonthsTillPayoff() {
    if (monthsTillPayoff.getDenominator() = 1) {
      do Output.printInt(monthsTillPayoff.getNumerator());
    } else {
      do monthsTillPayoff.printAsMixedFraction();
    }

    return;
  }
}
